{"version":3,"sources":["Responsive.js","Header.js","Panel.js","serviceWorker.js","index.js","App.js"],"names":["Mobile","props","react_default","a","createElement","react_responsive_default","Object","assign","maxWidth","className","children","Header","Responsive_Mobile","Panel","_ref","title","translation","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAeaA,EAAS,SAAAC,GAAK,OACzBC,EAAAC,EAAAC,cAACC,EAAAF,EAADG,OAAAC,OAAA,GAAgBN,EAAhB,CAAuBO,SAAU,MAC/BN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UAAUR,EAAMS,YCdpB,SAASC,IACtB,OACET,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACbP,EAAAC,EAAAC,cAACQ,EAAD,cCJS,SAASC,EAATC,GAAuC,IAAtBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,YACrC,OACEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,SAASM,GACvBb,EAAAC,EAAAC,cAAA,QAAMK,UAAU,YAAhB,yDACAP,EAAAC,EAAAC,cAAA,SAAIY,ICKUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOrB,EAAAC,EAAAC,cCFD,WACb,OACEF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqB,SAAA,KACEtB,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACS,EAAD,CACEE,MAAM,cACNC,YAAY,2gBAQdd,EAAAC,EAAAC,cAACS,EAAD,CACEE,MAAM,YACNC,YAAY,+mBDdJ,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b28f690f.chunk.js","sourcesContent":["import React from \"react\";\nimport Responsive from \"react-responsive\";\n\nexport const Desktop = props => (\n  <Responsive {...props} minWidth={992}>\n    <div className=\"desktop\">{props.children}</div>\n  </Responsive>\n);\n\nexport const Tablet = props => (\n  <Responsive {...props} minWidth={768} maxWidth={991}>\n    <div className=\"tablet\">{props.children}</div>\n  </Responsive>\n);\n\nexport const Mobile = props => (\n  <Responsive {...props} maxWidth={767}>\n    <div className=\"mobile\">{props.children}</div>\n  </Responsive>\n);\n","import React from \"react\";\nimport { Mobile } from \"./Responsive\";\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <Mobile>sdsd</Mobile>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Panel({ title, translation }) {\n  return (\n    <div className=\"panel\">\n      <h2 className=\"title\">{title}</h2>\n      <span className=\"subtitle\">Dibaca sebelum bacaan Al-Fatihah, pada rakaat pertama</span>\n      <p>{translation}</p>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Panel from \"./Panel\";\n\nexport default function App() {\n  return (\n    <>\n      <Header />\n      <Panel\n        title=\"Doa Iftitah\"\n        translation=\"Allah Maha Besar dengan dengan kebesaran yang tidak terduga, dan segala pujian bagi Allah\n        dengan pujian yang sangat banyak, dan Maha Suci Allah pada pagi dan petang hari,\n        sesungguhnya aku hadapkan mukaku kepada (Allah) yang menciptakan langit dan bumi dengan\n        kepatuhan dan aku bukanlah dari kaum yang menyekutukan Allah, sesungguhnya shalatku ibadahku\n        hidupku dan matiku hanyalah milik Allah, Tuhan pemilik alam. Tidak ada sekutu bagi-Nya dan\n        demikianlah aku diperintahkan dan aku termasuk dari golongan kaum muslimin.\"\n      />\n\n      <Panel\n        title=\"Doa Qunut\"\n        translation=\"Ya Allah tunjukkanlah saya sebagaimana mereka yang sudah Engkau berikan petunjuk.\n        Dan kasihkanlah kesehatan kepadaku sebagaimana mereka yang Engkau sudah kasih kesehatan.\n        Dan peliharalah aku sebagaimana orang yang telah Engkau pelihara.\n        Dan berilah keberkahan bagiku pada segala apa yang Engkau sudah karuniakan.\n        Dan lindungi aku dari segala bahaya kejahatan yang Engkau sudah pastikan.\n        Maka sesungguhnya Engkaulah yang menghukum dan bukan kena hukum.\n        Maka sesungguhnya tidak hina orang yang Engkau pimpin.\n        Dan tidak mulia orang yang mana Engkau memusuhinya.\n        Maha Suci Engkau wahai Tuhan kami dan Maha tinggi Engkau.\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}